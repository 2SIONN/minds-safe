generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  nickname  String?
  createdAt DateTime @default(now())

  posts         Post[]
  replies       Reply[]
  empathies     Empathy[]
  pushes        PushSubscription[]
  notifications Notification[]

  @@index([email])
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  tags      Json     @default("[]")
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replies   Reply[]
  empathies Empathy[]

  @@index([authorId])
}

model Reply {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empathies Empathy[]

  @@index([postId])
  @@index([authorId])
}

enum TargetType {
  POST
  REPLY
}

/**
 * Like → Empathy (모델/필드명 변경)
 * DB 테이블도 likes → empathies 로 변경 (@@map("empathies"))
 * - 다형 참조(targetType + targetId)는 FK를 걸 수 없으니 앱 레벨에서 무결성 보장
 */
model Empathy {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetType TargetType
  targetId   String

  createdAt DateTime @default(now())
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  Reply     Reply?   @relation(fields: [replyId], references: [id])
  replyId   String?

  @@unique([userId, targetType, targetId])
  @@index([userId])
  @@map("empathies")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  payload   Json
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("notifications")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("push_subscriptions")
}
